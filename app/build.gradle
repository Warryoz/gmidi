plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

def nativeAccessArg = '--enable-native-access=ALL-UNNAMED'

class JavaFxConfiguration {
    String version
    List<String> modules = []

    void modules(String... moduleNames) {
        setModules(moduleNames.toList())
    }

    void setModules(Iterable<?> moduleNames) {
        this.modules = moduleNames.collect { it.toString() }
    }

    void setVersion(Object version) {
        this.version = version.toString()
    }
}

def defaultJavafxVersion = (findProperty('javafxVersion') ?: '21.0.2').toString()
def javafxConfig = new JavaFxConfiguration(
    version: defaultJavafxVersion,
    modules: ['javafx.controls', 'javafx.graphics', 'javafx.base']
)

def javafx(Closure<?> configureClosure) {
    configureClosure.delegate = javafxConfig
    configureClosure.resolveStrategy = Closure.DELEGATE_FIRST
    configureClosure.call()
}

def javafxPlatform = {
    def override = findProperty('javafxPlatform')
    if (override) {
        return override.toString()
    }

    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty('os.arch').toLowerCase(java.util.Locale.ROOT)

    if (os.isWindows()) {
        return arch.contains('64') ? 'win' : 'win-x86'
    }
    if (os.isMacOsX()) {
        if (arch.contains('aarch64') || arch.contains('arm64')) {
            return 'mac-aarch64'
        }
        return 'mac'
    }
    if (os.isLinux()) {
        if (arch.contains('aarch64') || arch.contains('arm64')) {
            return 'linux-aarch64'
        }
        if (arch.contains('arm')) {
            return 'linux-arm32'
        }
        return 'linux'
    }
    throw new GradleException("Unsupported JavaFX platform: ${os} (${arch})")
}.call()

javafx {
    version = defaultJavafxVersion
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.base']
}

dependencies {
    javafxConfig.modules.unique().each { moduleName ->
        def artifactName = moduleName.replace('.', '-')
        implementation "org.openjfx:${artifactName}:${javafxConfig.version}:${javafxPlatform}"
    }
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    modularity.inferModulePath = true
}

application {
    mainModule = 'com.gmidi'
    mainClass = 'com.gmidi.App'
    applicationDefaultJvmArgs = [nativeAccessArg]
}

tasks.withType(JavaExec).configureEach {
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}
