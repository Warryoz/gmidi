import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

def javafxVersion = '23.0.2'
def os = OperatingSystem.current()
def platformClassifier = os.isWindows() ? 'win' : (os.isMacOsX() ? 'mac' : 'linux')

def nativeAccessArg = '--enable-native-access=ALL-UNNAMED'

dependencies {
    implementation "org.openjfx:javafx-controls:${javafxVersion}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}"
    implementation "org.openjfx:javafx-base:${javafxVersion}"

    runtimeOnly "org.openjfx:javafx-controls:${javafxVersion}:${platformClassifier}"
    runtimeOnly "org.openjfx:javafx-graphics:${javafxVersion}:${platformClassifier}"
    runtimeOnly "org.openjfx:javafx-base:${javafxVersion}:${platformClassifier}"

    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    modularity.inferModulePath = true
}

application {
    mainModule = 'com.gmidi'
    mainClass = 'com.gmidi.App'
    applicationDefaultJvmArgs = [nativeAccessArg]
}

tasks.withType(JavaExec).configureEach {
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}

tasks.withType(JavaExec).configureEach {
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}

tasks.withType(Test).configureEach {
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}
