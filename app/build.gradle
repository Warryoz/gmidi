plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

def javafxVersion = '21.0.2'
def os = org.gradle.internal.os.OperatingSystem.current()
def arch = System.getProperty('os.arch')

def javafxPlatform =
        os.isWindows() ? (arch == 'aarch64' ? 'win-aarch64' : arch == 'x86' ? 'win-x86' : 'win') :
        os.isMacOsX() ? (arch == 'aarch64' ? 'mac-aarch64' : 'mac') :
        os.isLinux() ? (arch == 'aarch64' ? 'linux-aarch64' : arch.startsWith('arm') ? 'linux-arm32' : 'linux') :
        null

if (javafxPlatform == null) {
    throw new GradleException("Unsupported JavaFX platform for OS '${os}' and architecture '${arch}'")
}
def nativeAccessArg = '--enable-native-access=ALL-UNNAMED'

dependencies {
    implementation "org.openjfx:javafx-controls:$javafxVersion:$javafxPlatform"
    implementation "org.openjfx:javafx-graphics:$javafxVersion:$javafxPlatform"
    implementation "org.openjfx:javafx-base:$javafxVersion:$javafxPlatform"
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    modularity.inferModulePath = true
}

application {
    mainModule = 'com.gmidi'
    mainClass = 'com.gmidi.App'
    applicationDefaultJvmArgs = [nativeAccessArg]
}

tasks.withType(JavaExec).configureEach {
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    modularity.inferModulePath = true
    jvmArgs nativeAccessArg
}
