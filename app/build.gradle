plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

def javafxVersion = '21.0.2'

/* ---- OS/arch â†’ JavaFX classifier ---- */
def os = org.gradle.internal.os.OperatingSystem.current()
def arch = System.getProperty('os.arch')?.toLowerCase()
def isAarch64 = arch?.contains('aarch64') || arch?.contains('arm64')
def javafxPlatform =
        os.isWindows() ? 'win' :
                os.isMacOsX()  ? (isAarch64 ? 'mac-aarch64' : 'mac') :
                        os.isLinux()   ? (isAarch64 ? 'linux-aarch64' : 'linux') :
                                { throw new GradleException("Unsupported JavaFX platform: ${os} / arch=${arch}") }()

dependencies {
    implementation "org.openjfx:javafx-base:${javafxVersion}:${javafxPlatform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${javafxPlatform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${javafxPlatform}"
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
    modularity.inferModulePath = true
}

def prismVerboseEnabled = providers.gradleProperty('prismVerbose')
        .map { it.toBoolean() }
        .orElse(false)

application {
    mainModule = 'com.gmidi'
    mainClass  = 'com.gmidi.MainApp'
    applicationDefaultJvmArgs = prismVerboseEnabled.map { enabled ->
        def args = ['-Dprism.allowhidpi=false', '--add-exports=java.desktop/com.sun.media.sound=ALL-UNNAMED']
        if (enabled) {
            args << '-Dprism.verbose=true'
        }
        return args
    }.get()
}

tasks.withType(JavaExec).configureEach {
    modularity.inferModulePath = true
    jvmArgs '--add-exports=java.desktop/com.sun.media.sound=ALL-UNNAMED'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    modularity.inferModulePath = true
    jvmArgs '--add-modules', 'javafx.controls,javafx.graphics'
}
